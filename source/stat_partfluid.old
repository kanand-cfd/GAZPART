subroutine STAT_PARTFLUID(NCYCLE, TIME)

use DNS_DIM	       !- Dimension
use PARAM_PHYS         !- Physical & numerical parameters
use PARTICLE_PARALLEL
use GEOMETRIC_VARIABLE !- 
use STATISTICS         !- Statistics
use CHECK_CPU	       !- CPU time checks

implicit none


!- cycle number
integer, intent(in) :: NCYCLE
!- Curent time
real(kind=8), intent(in) :: TIME


!---------------------------------------------------------------------
!- Local arrays
!---------------------------------------------------------------------
!- Arrays containing statistics
real(kind=8), dimension(NSTAT,NIG,POLYDISPMAX) :: MEAN_PARTFLUID_LOC
real(kind=8), dimension(NSTAT,NIG,POLYDISPMAX) :: MEAN_PARTFLUID

!- Number of particle per class
real(kind=8), dimension(POLYDISPMAX) :: NPM

real(kind=8), dimension(ndim, 1) :: FFLUID

real(kind=8), dimension(ndim, 1) :: FDRAG, FLIFT

real(kind=8), dimension(ndim, 1) :: FTORQUE

real(kind=8), dimension(ndim, 1) :: TORQUE_PITCHING, TORQUE_ROTATION

real(kind=8) :: CDRAG, CLIFT
real(kind=8) :: CDRAG_PHI0, CDRAG_PHI90

real(kind=8) :: CTPITCH
real(kind=8) :: CTROTATION

!!! Fitting Parameters for Drag Coefficient !!!
real(kind=8) :: a0, a1, a2, a3, a4, a5, a6, a7, a8

!!! Fitting Parameters for Lift Coefficient !!!
real(kind=8) :: b1, b2, b3, b4, b5, b6, b7, b8, b9, b10

!! Fitting Parameters for Pitching torque coefficient !!
real(kind=8) :: c1, c2, c3, c4, c5, c6, c7, c8, c9, c10

!! Fitting Parameters for Rotation torque coefficient !!
real(kind=8) :: r1, r2, r3, r4

real(kind=8), dimension(ndim, 1) :: UREL            ! relative velocity
real(kind=8), dimension(ndim, 1) :: UFLU_PFRAME     ! fluid velocity in particle frame
real(kind=8), dimension(ndim, 1) :: OREL            ! Relative rotational velocity
real(kind=8), dimension(ndim, 1) :: curl_UFLU       ! curl of fluid velocity

real(kind=8) :: phi      ! Angle of Incidence
real(kind=8) :: dequiv   ! Equivalent Diameter
real(kind=8) :: Rep      ! Particle Reynolds number
real(kind=8) :: UREL_mag ! Magnitude of relative velocity
real(kind=8) :: UFLU_mag ! Magnitude of fluid velocity in particle frame
real(kind=8) :: Re_R     ! Rotational Particle Reynolds Number
real(kind=8) :: OREL_MAG ! Magnitude of Relative Rotational Velocity
real(kind=8) :: OREL_YZ
real(kind=8) :: PMASS

!- Index of particle class for polydisperse stat
integer :: IDP


!- Time control variable
real(kind=8) :: TIME_START, TIME_END

integer :: I,J, NUMFILE

real(kind=8) :: MINAX, TAUPF, FBETA
!!==================================================================================!!
!! Fitting parameters taken from Zastawny et al. (2012) for Ellipsoid 2 (a/b=1.25) !!
!! Drag 
a0 = 1.95
a1 = 18.12; a2 = 1.023; a3 = 4.26; a4 = 0.384
a5 = 21.52; a6 = 0.990; a7 = 2.86; a8 = 0.260
!! Lift
b1 = 0.083; b2 = -0.21; b3 = 1.582; b4 = 0.851; b5  = 1.842
b6 =-0.802; b7 =-0.006; b8 = 0.874; b9 = 0.009; b10 = 0.570

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Fitting parameters taken from Zastawny et al. (2012) for Ellipsoid 2 (a/b=1.25) !!
!! Pitching Torque
c1 = 0.935; c2 = 0.146; c3 = -0.469; c4 = 0.145; c5  = 0.116
c6 = 0.748; c7 = 0.041; c8 =  0.221; c9 = 0.657; c10 = 0.044
!! Rotation Torque
r1 = 0.573; r2 =-0.154; r3 = 116.61; r4 = 1.0
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!- CPU check
if(MYID == 0) then

  TIME_START=MPI_WTIME()

end if


MEAN_PARTFLUID(:,:,:) = ZERO
MEAN_PARTFLUID_LOC(:,:,:) = ZERO

do J = 1, NIG

    do I = 1, NPART_LOC(J)

        IDP = PART(I,J)%IDP

        PMASS = RHOP(J, IDP)*(4.0/3.0)*PPI*(EMAJ_PART(J,IDP)**3.0)/((APR_PART(J)**(2.0)))


        ! Relative velocity of particle relative to fluid 
        UREL(1,1) = PART(I,J)%UFAP - PART(I,J)%UP
        UREL(2,1) = PART(I,J)%VFAP - PART(I,J)%VP
        UREL(3,1) = PART(I,J)%WFAP - PART(I,J)%WP

        ! Magnitude of Relative velocity
        UREL_mag = sqrt(UREL(1,1)**2 + UREL(2,1)**2 + UREL(3,1)**2)

        ! Equivalent Diameter !! Diameter of a sphere (pi/6*dequiv^3) with same volume as ellipsoid (4/3*pi*a^3/beta^2)
        dequiv = 2.0*EMAJ_PART(J,IDP)/(APR_PART(J)**(2.0/3.0))

        ! Particle Reynolds Number
        Rep = (UREL_mag*dequiv)/VISC

        ! Transform the fluid velocity from the fixed frame to the particle frame
        ! Initialize fluid velocity vector with fluid velocity from fixed frame
        UFLU_PFRAME(1,1) = PART(I,J)%UFAP - PART(I,J)%UP
        UFLU_PFRAME(2,1) = PART(I,J)%VFAP - PART(I,J)%VP
        UFLU_PFRAME(3,1) = PART(I,J)%WFAP - PART(I,J)%WP

        call transform_basis(UFLU_PFRAME, conj_q(PART(I,J)%ELLQUAT), shape(UFLU_PFRAME))

        phi = ATAN2(abs(UFLU_PFRAME(2,1)), abs(UFLU_PFRAME(1,1)))

        UFLU_mag = sqrt(UFLU_PFRAME(1,1)**2 + UFLU_PFRAME(2,1)**2 + UFLU_PFRAME(3,1)**2)

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !       Calculation of Drag Coefficient and Lift Coefficient using correlations     !
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        ! C_D
        CDRAG_PHI0  = a1/Rep**a2 + a3/Rep**a4

        CDRAG_PHI90 = a5/Rep**a6 + a7/Rep**a8 

        CDRAG = CDRAG_PHI0 + (CDRAG_PHI90 - CDRAG_PHI0)*(sin(phi))**a0

        ! C_L
        CLIFT = (b1/Rep**b2 + b3/Rep**b4) * (sin(phi))**(b5 + b6*(Rep**b7)) * (cos(phi))**(b8 + b9*(Rep**b10))
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !                          Calculation of Drag and Lift Force                       !
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        FDRAG(:,1) = (1.0/2.0) * (RHOF/PMASS) * (1.0/4.0) * (PPI * dequiv**2) * CDRAG * UFLU_mag * UFLU_PFRAME(:,1)


        FLIFT(1,1) = (1.0/2.0) * (RHOF/PMASS) * (1.0/4.0) * (PPI * dequiv**2) * CLIFT &
                    * UFLU_mag**2 * sin(phi) * sign(1.0, -UFLU_PFRAME(1,1))

        FLIFT(2,1) = (1.0/2.0) * (RHOF/PMASS) * (1.0/4.0) * (PPI * dequiv**2) * CLIFT &
                    * UFLU_mag**2 * cos(phi) * (UFLU_PFRAME(2,1)/sqrt(UFLU_PFRAME(2,1)**2 + UFLU_PFRAME(3,1)**2))

        FLIFT(3,1) = (1.0/2.0) * (RHOF/PMASS) * (1.0/4.0) * (PPI * dequiv**2) * CLIFT &
                    * UFLU_mag**2 * cos(phi) * (UFLU_PFRAME(3,1)/sqrt(UFLU_PFRAME(2,1)**2 + UFLU_PFRAME(3,1)**2))

        call transform_basis(FDRAG, PART(I,J)%ELLQUAT, shape(FDRAG))

        call transform_basis(FLIFT, PART(I,J)%ELLQUAT, shape(FLIFT))
 

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        MEAN_PARTFLUID_LOC(1,J,IDP) = MEAN_PARTFLUID_LOC(1,J,IDP) + Rep

        MEAN_PARTFLUID_LOC(2,J,IDP) = MEAN_PARTFLUID_LOC(2,J,IDP) + CDRAG

        MEAN_PARTFLUID_LOC(3,J,IDP) = MEAN_PARTFLUID_LOC(3,J,IDP) + CLIFT

        MEAN_PARTFLUID_LOC(4,J,IDP) = MEAN_PARTFLUID_LOC(4,J,IDP) + FDRAG(1,1)

        MEAN_PARTFLUID_LOC(5,J,IDP) = MEAN_PARTFLUID_LOC(5,J,IDP) + FDRAG(2,1)

        MEAN_PARTFLUID_LOC(6,J,IDP) = MEAN_PARTFLUID_LOC(6,J,IDP) + FDRAG(3,1)

        MEAN_PARTFLUID_LOC(7,J,IDP) = MEAN_PARTFLUID_LOC(7,J,IDP) + FLIFT(1,1)

        MEAN_PARTFLUID_LOC(8,J,IDP) = MEAN_PARTFLUID_LOC(8,J,IDP) + FLIFT(2,1)  
        
        MEAN_PARTFLUID_LOC(9,J,IDP) = MEAN_PARTFLUID_LOC(9,J,IDP) + FLIFT(3,1) 
        
        MEAN_PARTFLUID_LOC(10,J,IDP) = MEAN_PARTFLUID_LOC(10,J,IDP) + sqrt(FDRAG(1,1)**2 + FDRAG(2,1)**2 + FDRAG(3,1)**2)

        MEAN_PARTFLUID_LOC(11,J,IDP) = MEAN_PARTFLUID_LOC(11,J,IDP) + sqrt(FLIFT(1,1)**2 + FLIFT(2,1)**2 + FLIFT(3,1)**2)                   

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !! Relative Rotational Velocity !!
        curl_UFLU(1,1) = PART(I,J)%VORTXAP
        curl_UFLU(2,1) = PART(I,J)%VORTYAP
        curl_UFLU(3,1) = PART(I,J)%VORTZAP 


        call transform_basis(curl_UFLU, conj_q(PART(I,J)%ELLQUAT), shape(curl_UFLU))

        OREL(1,1) = 0.5*curl_UFLU(1,1) - PART(I,J)%OMEGAX
        OREL(2,1) = 0.5*curl_UFLU(2,1) - PART(I,J)%OMEGAY
        OREL(3,1) = 0.5*curl_UFLU(3,1) - PART(I,J)%OMEGAZ

        OREL_MAG = sqrt(OREL(1,1)**2 + OREL(2,1)**2 + OREL(3,1)**2)


        OREL_YZ = sqrt(OREL(3,1)**2 + OREL(2,1)**2)

        !! Rotational Reynolds Number !!
        Re_R = (OREL_MAG * dequiv**2)/(4.0*VISC)

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !!   Calculation of Pitching & Rotational Torque Coefficient using correlations    !!
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        !! CTPITCH !!
        CTPITCH = (c1/Rep**c2 + c3/Rep**c4) * (sin(phi))**(c5 + c6*(Rep**c7)) * (cos(phi))**(c8 + c9*(Rep**c10))

        !! CTROTATION !!
        CTROTATION = r1*(Re_R**r2) + r3/(Re_R**r4)
        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        TORQUE_PITCHING(1,1) = 0.0

        TORQUE_PITCHING(2,1) = (1.0/4.0) * (RHOF/PMASS) * (1.0/4.0) * PPI * dequiv**3 * CTPITCH &
                             * UFLU_mag * (abs(UFLU_PFRAME(3,1))/sqrt(UFLU_PFRAME(2,1)**2 + UFLU_PFRAME(3,1)**2)) &
                             * sign(1.0, UFLU_PFRAME(1,1)*UFLU_PFRAME(3,1))

        TORQUE_PITCHING(3,1) = (1.0/4.0) * (RHOF/PMASS) * (1.0/4.0) * PPI * dequiv**3 * CTPITCH &
                             * UFLU_mag * (abs(UFLU_PFRAME(2,1))/sqrt(UFLU_PFRAME(2,1)**2 + UFLU_PFRAME(3,1)**2)) &
                             * sign(1.0, UFLU_PFRAME(1,1)*UFLU_PFRAME(2,1))


        TORQUE_ROTATION(1,1) = - CTROTATION * (RHOF/PMASS)/2.0 * (dequiv/2.0)**5 * OREL(1,1)**2

        TORQUE_ROTATION(2,1) = - CTROTATION * (RHOF/PMASS)/2.0 * (dequiv/2.0)**5 * OREL_YZ * OREL(2,1)

        TORQUE_ROTATION(3,1) = - CTROTATION * (RHOF/PMASS)/2.0 * (dequiv/2.0)**5 * OREL_YZ * OREL(3,1)


        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        MEAN_PARTFLUID_LOC(12,J,IDP) = MEAN_PARTFLUID_LOC(12,J,IDP) + Re_R

        MEAN_PARTFLUID_LOC(13,J,IDP) = MEAN_PARTFLUID_LOC(13,J,IDP) + CTPITCH

        MEAN_PARTFLUID_LOC(14,J,IDP) = MEAN_PARTFLUID_LOC(14,J,IDP) + CTROTATION

        MEAN_PARTFLUID_LOC(15,J,IDP) = MEAN_PARTFLUID_LOC(15,J,IDP) + TORQUE_PITCHING(1,1)

        MEAN_PARTFLUID_LOC(16,J,IDP) = MEAN_PARTFLUID_LOC(16,J,IDP) + TORQUE_PITCHING(2,1)

        MEAN_PARTFLUID_LOC(17,J,IDP) = MEAN_PARTFLUID_LOC(17,J,IDP) + TORQUE_PITCHING(3,1)

        MEAN_PARTFLUID_LOC(18,J,IDP) = MEAN_PARTFLUID_LOC(18,J,IDP) + TORQUE_ROTATION(1,1)

        MEAN_PARTFLUID_LOC(19,J,IDP) = MEAN_PARTFLUID_LOC(19,J,IDP) + TORQUE_ROTATION(2,1)  
        
        MEAN_PARTFLUID_LOC(20,J,IDP) = MEAN_PARTFLUID_LOC(20,J,IDP) + TORQUE_ROTATION(3,1) 
        
        MEAN_PARTFLUID_LOC(21,J,IDP) = MEAN_PARTFLUID_LOC(21,J,IDP) + &
                                       sqrt(TORQUE_PITCHING(1,1)**2 + TORQUE_PITCHING(2,1)**2 + TORQUE_PITCHING(3,1)**2)

        MEAN_PARTFLUID_LOC(22,J,IDP) = MEAN_PARTFLUID_LOC(22,J,IDP) + &
                                       sqrt(TORQUE_ROTATION(1,1)**2 + TORQUE_ROTATION(2,1)**2 + TORQUE_ROTATION(3,1)**2)                   

        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        ! Particle Relaxation Time - Creeping Flow
        MINAX = EMAJ_PART(J, IDP)/APR_PART(J)


        if(APR_PART(J) == 1.0) then

            FBETA = 1.0

        else

            FBETA = (APR_PART(J) * log(APR_PART(J) + sqrt(APR_PART(J)**2 - 1)))/(sqrt(APR_PART(J)**2 - 1))

        end if

        TAUPF = (2.0/9.0)*(RHOP(J,IDP) * MINAX**2)/(RHOF*VISC)

        TAUPF = TAUPF*FBETA

        MEAN_PARTFLUID_LOC(23,J,IDP) = MEAN_PARTFLUID_LOC(23, J, IDP) + TAUPF

        MEAN_PARTFLUID_LOC(24,J,IDP) = MEAN_PARTFLUID_LOC(24, J, IDP) + GRAVITY(J)

        MEAN_PARTFLUID_LOC(25,J,IDP) = MEAN_PARTFLUID_LOC(25, J, IDP) + phi

        MEAN_PARTFLUID_LOC(26,J,IDP) = MEAN_PARTFLUID_LOC(26, J, IDP) + 1.0

!        write(*,*) ' '
!        write(*,*) 'CDRAG = ', CDRAG, ' CLIFT = ', CLIFT, ' Rep = ', Rep
!        write(*,*) 'FDRAG = ', FDRAG
!        write(*,*) 'FLIFT = ', FLIFT
!        write(*,*) 'UREL_mag = ', UREL_mag
!        write(*,*) 'UFLU_PFRAME = ', UFLU_PFRAME
!        write(*,*) 'phi = ', phi
!        write(*,*) 'UP = ', PART(I,J)%UP, ' VP = ', PART(I,J)%VP, ' WP = ', PART(I,J)%WP 
!        write(*,*) 'OXP = ', PART(I,J)%OMEGAX, ' OYP = ', PART(I,J)%OMEGAY, ' OZP = ', PART(I,J)%OMEGAZ 

    end do


    do IDP = 1, POLYDISP(J)

    call RSUMCPU(MEAN_PARTFLUID_LOC(26,J,IDP),NPM(IDP))

    end do

end do


do J = 1, NIG

    do IDP = 1, POLYDISP(J)

      call MPI_ALLREDUCE(MEAN_PARTFLUID_LOC(:,J,IDP),MEAN_PARTFLUID(:,J,IDP),NSTAT,MPI_DOUBLE_PRECISION,MPI_SUM,MPI_COMM_WORLD,IERR)

      !!- Normalization by the full number of particle
      MEAN_PARTFLUID(:,J,IDP) = MEAN_PARTFLUID(:,J,IDP) / NPM(IDP)

      !!- Rewrite the number of particles
      MEAN_PARTFLUID(26,J,IDP) = NPM(IDP)

    end do

end do

!!--------------------------------------------------------------------
!! Print in file
!!--------------------------------------------------------------------
if(MYID==0)  then

  do J = 1, NIG

    do IDP = 1, POLYDISP(J)

      NUMFILE = 540+(J-1)*POLYDISP(J)+IDP

      write(NUMFILE,10000)   &
        TIME, MEAN_PARTFLUID( 1,J,IDP),  & !- Rep
              MEAN_PARTFLUID( 2,J,IDP),  & !- CDRAG
              MEAN_PARTFLUID( 3,J,IDP),  & !- CLIFT
  
              MEAN_PARTFLUID( 4,J,IDP),  & !- FDRAG(1,1)
              MEAN_PARTFLUID( 5,J,IDP),  & !- FDRAG(2,1)
              MEAN_PARTFLUID( 6,J,IDP),  & !- FDRAG(3,1)

              MEAN_PARTFLUID( 7,J,IDP),  & !- FLIFT(1,1)
              MEAN_PARTFLUID( 8,J,IDP),  & !- FLIFT(2,1)
              MEAN_PARTFLUID( 9,J,IDP),  & !- FLIFT(3,1)

              MEAN_PARTFLUID(10,J,IDP),  & !- !! FDRAG !!
              MEAN_PARTFLUID(11,J,IDP),  & !- !! FLIFT !!

              MEAN_PARTFLUID(12,J,IDP),  & !- Re_R
              MEAN_PARTFLUID(13,J,IDP),  & !- CTPITCH
              MEAN_PARTFLUID(14,J,IDP),  & !- CTROTATION
              
              MEAN_PARTFLUID(15,J,IDP),  & !- TORQUE_PITCHING(1,1)
              MEAN_PARTFLUID(16,J,IDP),  & !- TORQUE_PITCHING(2,1)
              MEAN_PARTFLUID(17,J,IDP),  & !- TORQUE_PITCHING(3,1)

              MEAN_PARTFLUID(18,J,IDP),  & !- TORQUE_ROTATION(1,1) 
              MEAN_PARTFLUID(19,J,IDP),  & !- TORQUE_ROTATION(2,1)
              MEAN_PARTFLUID(20,J,IDP),  & !- TORQUE_ROTATION(3,1)

              MEAN_PARTFLUID(21,J,IDP),  & !- !! TORQUE_PITCHING !! 
              MEAN_PARTFLUID(22,J,IDP),  & !- !! TORQUE_ROTATION !!

              MEAN_PARTFLUID(23,J,IDP),  & !- TAUPF
              MEAN_PARTFLUID(24,J,IDP),  & !- Gravity
              MEAN_PARTFLUID(25,J,IDP),  & !-phi   
              MEAN_PARTFLUID(26,J,IDP)     !- <Np>

    end do !!- End loop over POLYDISP

  end do !!- End loop over NIG

end if !- End uf MYID==0




!!- CPU check
if(MYID == 0) then
 TIME_END = MPI_WTIME()
 CPU_PART(6) = CPU_PART(6) + TIME_END - TIME_START
end if

!!----------------------------------------------------------------------
10000 format (40(e17.7))
    
end subroutine STAT_PARTFLUID
